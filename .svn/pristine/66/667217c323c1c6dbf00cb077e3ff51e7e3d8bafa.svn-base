package edu.wm.cs.cs301.soleonv.ui;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;
import android.widget.ToggleButton;
import android.support.v7.widget.Toolbar;
import edu.wm.ed.cs301.soleonv.R;

/**
 * Created by solivialeonvitervo on 11/15/17.
 * Displays the maze and lets the user either watch a robot exploring the maze or allows the
 * user to manually navigate the robot through the maze.
 * If  in manual exploration mode: screen provides navigation buttons (up, down, left,
 * right) for user.
 * If in robot exploration mode: screen provides a start/pause button for user to start the
 * exploration and to pause the animation.
 *
 * Displays the remaining energy. Allows user to show the whole maze from top or not,
 * show the solution in the maze or not, and  show the currently visible walls or not.
 *
 *  If the robot stops (no energy, at exit) the screen switches to the finish screen.
 *  If user press back button, app returns to State Title to allow the user to choose different
 parameter settings and restart.
 */

public class PlayActivity extends AppCompatActivity {

    private static final String LOG_TAG = "PlayActivity";
    private ProgressBar batteryLevelBar;
    private float batteryLevel = 0;
    private int pathLength = 0;
    private ToggleButton  showMaze, showWall, showSolution;
    private Toolbar playStateBar;
    private boolean exitFound;
    public Intent prevIntent;
    public String driver = "Manual";

    Button upButton, downButton, leftButton, rightButton, pauseButton, winButton, loseButton;

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_play);


        batteryLevelBar = (ProgressBar) findViewById(R.id.energyLevelBar);
        batteryLevelBar.setMax(3000);
        batteryLevelBar.setProgress(2500);

        //toggle buttons
        showMaze = ( ToggleButton) findViewById(R.id.showMazeToggle);
        showWall = ( ToggleButton) findViewById(R.id.showWall);
        showSolution = ( ToggleButton) findViewById(R.id.showSolutionToggle);

        //buttons
        winButton = (Button) findViewById(R.id.tempFinishButton);
        loseButton = (Button) findViewById(R.id.lostButton);


        //arrows
        upButton = (Button) findViewById(R.id.up);
        downButton = (Button) findViewById(R.id.down);
        leftButton = (Button) findViewById(R.id.left);
        rightButton = (Button) findViewById(R.id.right);
        pauseButton = (Button) findViewById(R.id.pausebutton);

        showArrows();

        prevIntent = getIntent();

        upButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /** In final version, this will revisit the last maze generated and put the user in it, but for
                 right now sends toast message letting the user know the button has been pushed.
                 **/
                Context upContext = getApplicationContext();
                CharSequence upText = "Up button has been pushed.";
                int upDuration = Toast.LENGTH_SHORT;

                Toast upToast = Toast.makeText(upContext, upText, upDuration);
                upToast.show();
            }
        });

        downButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /** In final version, this will revisit the last maze generated and put the user in it, but for
                 right now sends toast message letting the user know the button has been pushed.
                 **/
                Context downContext = getApplicationContext();
                CharSequence downText = "Down button has been pushed.";
                int downDuration = Toast.LENGTH_SHORT;

                Toast downToast = Toast.makeText(downContext, downText, downDuration);
                downToast.show();
            }
        });

        leftButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /** In final version, this will revisit the last maze generated and put the user in it, but for
                 right now sends toast message letting the user know the button has been pushed.
                 **/
                Context leftContext = getApplicationContext();
                CharSequence leftText = "Left button has been pushed.";
                int leftDuration = Toast.LENGTH_SHORT;

                Toast lefttoast = Toast.makeText(leftContext, leftText, leftDuration);
                lefttoast.show();
            }
        });

        rightButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /** In final version, this will revisit the last maze generated and put the user in it, but for
                 right now sends toast message letting the user know the button has been pushed.
                 **/
                Context rightContext = getApplicationContext();
                CharSequence rightText = "Right button has been pushed.";
                int rightDuration = Toast.LENGTH_SHORT;

                Toast righttoast = Toast.makeText(rightContext, rightText, rightDuration);
                righttoast.show();
            }
        });

        pauseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /** In final version, this will revisit the last maze generated and put the user in it, but for
                 right now sends toast message letting the user know the button has been pushed.
                 **/
                Context pauseContext = getApplicationContext();
                CharSequence pauseText = "Pause button has been pushed.";
                int pauseDuration = Toast.LENGTH_SHORT;

                Toast pausetoast = Toast.makeText(pauseContext, pauseText, pauseDuration);
                pausetoast.show();
            }
        });



        loseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                exitFound = false;
                toFinishPlay(v);
            }
        });

        winButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                exitFound = true;
                toFinishPlay(v);
            }
        });




    }


    /**
     * go back to title screen when the back button is pressed
     */
    @Override
    public void onBackPressed(){
        Intent intent = new Intent(this, AMazeActivity.class );
        startActivity(intent);
        finish();
    }


    /**
     * if wins goes to finish screen
     */
    public void toFinishPlay(View view){
        Log.v(LOG_TAG, "Moving to the finish screen");
        Intent intent = new Intent(this, FinishActivity.class);
        intent.putExtra("exitFound",exitFound);
        startActivity(intent);
    }

    /**
     * show arrow keys if in manual mode, pause button if automatic
     */

    public void showArrows(){

        Bundle extras = getIntent().getExtras();{
            if (extras != null){
                driver = extras.getString("driver");
            }
        }

        if (driver.equals("Manual")){
            //show arrows, do not show pause button
            Log.v(LOG_TAG, "Showing the manual keys");
            upButton.setVisibility(View.VISIBLE);
            downButton.setVisibility(View.VISIBLE);
            leftButton.setVisibility(View.VISIBLE);
            rightButton.setVisibility(View.VISIBLE);
            pauseButton.setVisibility(View.INVISIBLE);

        }
        else{
            Log.v(LOG_TAG, "Showing the pause/play button");
            //do not show arrows, show pause button
            upButton.setVisibility(View.INVISIBLE);
            downButton.setVisibility(View.INVISIBLE);
            leftButton.setVisibility(View.INVISIBLE);
            rightButton.setVisibility(View.INVISIBLE);
            pauseButton.setVisibility(View.VISIBLE);

        }
    }




}
